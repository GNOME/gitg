/* gspell-1.vapi generated by vapigen-0.46, do not modify. */

[CCode (cprefix = "Gspell", gir_namespace = "Gspell", gir_version = "1", lower_case_cprefix = "gspell_")]
namespace Gspell {
	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_checker_get_type ()")]
	public class Checker : GLib.Object {
		[CCode (has_construct_function = false)]
		public Checker (Gspell.Language? language);
		public void add_word_to_personal (string word, ssize_t word_length);
		public void add_word_to_session (string word, ssize_t word_length);
		public bool check_word (string word, ssize_t word_length) throws GLib.Error;
		public void clear_session ();
		public unowned Gspell.Language? get_language ();
		public GLib.SList<string> get_suggestions (string word, ssize_t word_length);
		public void set_correction (string word, ssize_t word_length, string replacement, ssize_t replacement_length);
		public void set_language (Gspell.Language? language);
		public Gspell.Language language { get; set construct; }
		public virtual signal void session_cleared ();
		public virtual signal void word_added_to_personal (string word);
		public virtual signal void word_added_to_session (string word);
	}
	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_checker_dialog_get_type ()")]
	public class CheckerDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public CheckerDialog (Gtk.Window parent, Gspell.Navigator navigator);
		public unowned Gspell.Navigator get_spell_navigator ();
		public Gspell.Navigator spell_navigator { get; construct; }
	}
	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_entry_get_type ()")]
	public class Entry : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Entry ();
		[Version (since = "1.4")]
		public void basic_setup ();
		[Version (since = "1.4")]
		public unowned Gtk.Entry get_entry ();
		[Version (since = "1.4")]
		public static unowned Gspell.Entry get_from_gtk_entry (Gtk.Entry gtk_entry);
		[Version (since = "1.4")]
		public bool get_inline_spell_checking ();
		[Version (since = "1.4")]
		public void set_inline_spell_checking (bool enable);
		[Version (since = "1.4")]
		public Gtk.Entry entry { get; construct; }
		[Version (since = "1.4")]
		public bool inline_spell_checking { get; set; }
	}
	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_entry_buffer_get_type ()")]
	public class EntryBuffer : GLib.Object {
		[CCode (has_construct_function = false)]
		protected EntryBuffer ();
		[Version (since = "1.4")]
		public unowned Gtk.EntryBuffer get_buffer ();
		[Version (since = "1.4")]
		public static unowned Gspell.EntryBuffer get_from_gtk_entry_buffer (Gtk.EntryBuffer gtk_buffer);
		[Version (since = "1.4")]
		public unowned Gspell.Checker? get_spell_checker ();
		[Version (since = "1.4")]
		public void set_spell_checker (Gspell.Checker? spell_checker);
		[Version (since = "1.4")]
		public Gtk.EntryBuffer buffer { get; construct; }
		[Version (since = "1.4")]
		public Gspell.Checker spell_checker { get; set; }
	}
	[CCode (cheader_filename = "gspell/gspell.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "gspell_language_get_type ()")]
	[Compact]
	public class Language {
		public int compare (Gspell.Language language_b);
		public Gspell.Language copy ();
		public void free ();
		public static unowned GLib.List<Gspell.Language> get_available ();
		public unowned string get_code ();
		public static unowned Gspell.Language? get_default ();
		public unowned string get_name ();
		public static unowned Gspell.Language? lookup (string language_code);
	}
	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_language_chooser_button_get_type ()")]
	public class LanguageChooserButton : Gtk.Button, Atk.Implementor, Gspell.LanguageChooser, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public LanguageChooserButton (Gspell.Language? current_language);
	}
	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_language_chooser_dialog_get_type ()")]
	public class LanguageChooserDialog : Gtk.Dialog, Atk.Implementor, Gspell.LanguageChooser, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public LanguageChooserDialog (Gtk.Window parent, Gspell.Language? current_language, Gtk.DialogFlags flags);
	}
	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_navigator_text_view_get_type ()")]
	public class NavigatorTextView : GLib.InitiallyUnowned, Gspell.Navigator {
		[CCode (has_construct_function = false)]
		protected NavigatorTextView ();
		public unowned Gtk.TextView get_view ();
		public static unowned Gspell.Navigator @new (Gtk.TextView view);
		public Gtk.TextView view { get; construct; }
	}
	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_text_buffer_get_type ()")]
	public class TextBuffer : GLib.Object {
		[CCode (has_construct_function = false)]
		protected TextBuffer ();
		public unowned Gtk.TextBuffer get_buffer ();
		public static unowned Gspell.TextBuffer get_from_gtk_text_buffer (Gtk.TextBuffer gtk_buffer);
		public unowned Gspell.Checker? get_spell_checker ();
		public void set_spell_checker (Gspell.Checker? spell_checker);
		public Gtk.TextBuffer buffer { get; construct; }
		public Gspell.Checker spell_checker { get; set; }
	}
	[CCode (cheader_filename = "gspell/gspell.h", type_id = "gspell_text_view_get_type ()")]
	public class TextView : GLib.Object {
		[CCode (has_construct_function = false)]
		protected TextView ();
		[Version (since = "1.2")]
		public void basic_setup ();
		[Version (since = "1.2")]
		public bool get_enable_language_menu ();
		public static unowned Gspell.TextView get_from_gtk_text_view (Gtk.TextView gtk_view);
		public bool get_inline_spell_checking ();
		public unowned Gtk.TextView get_view ();
		[Version (since = "1.2")]
		public void set_enable_language_menu (bool enable_language_menu);
		public void set_inline_spell_checking (bool enable);
		[Version (since = "1.2")]
		public bool enable_language_menu { get; set; }
		public bool inline_spell_checking { get; set; }
		public Gtk.TextView view { get; construct; }
	}
	[CCode (cheader_filename = "gspell/gspell.h", type_cname = "GspellLanguageChooserInterface", type_id = "gspell_language_chooser_get_type ()")]
	public interface LanguageChooser : GLib.Object {
		public unowned Gspell.Language? get_language ();
		public unowned string get_language_code ();
		[NoWrapper]
		public abstract unowned Gspell.Language get_language_full (bool default_language);
		public abstract void set_language (Gspell.Language? language);
		public void set_language_code (string? language_code);
		[ConcreteAccessor]
		public abstract Gspell.Language language { get; set; }
		[ConcreteAccessor]
		public abstract string language_code { get; set; }
	}
	[CCode (cheader_filename = "gspell/gspell.h", type_cname = "GspellNavigatorInterface", type_id = "gspell_navigator_get_type ()")]
	public interface Navigator : GLib.InitiallyUnowned {
		public abstract void change (string word, string change_to);
		public abstract void change_all (string word, string change_to);
		public abstract bool goto_next (out string word, out Gspell.Checker spell_checker) throws GLib.Error;
	}
	[CCode (cheader_filename = "gspell/gspell.h", cprefix = "GSPELL_CHECKER_ERROR_")]
	public errordomain CheckerError {
		DICTIONARY,
		NO_LANGUAGE_SET;
		public static GLib.Quark quark ();
	}
}
